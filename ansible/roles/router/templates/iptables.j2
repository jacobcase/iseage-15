#!/bin/bash

# Vlans and external ips
{% for router in router_configuration %}
{{ router.name }}="{{ router.iface }}"
{{ router.external_name }}="{{ router.address }}"
{% endfor %}

# Internal ips
{% for internal in internal_ip %}
{{ internal.name }}="{{ internal.address }}"
{% endfor %}


# Flush
iptables -F
iptables -t nat -F
iptables -X
iptables -t nat -X
iptables -t mangle -F
iptables -t mangle -X

## Firewall

# Allow loopback and drop loopback spoofing
iptables -A INPUT -i lo -p all -j ACCEPT
iptables -A OUTPUT -o lo -p all -j ACCEPT

{% for router in router_configuration %}
iptables -A INPUT -p all -s localhost -i {{router.iface}} -j DROP
{% endfor %}

# Drop all internal traffic coming
iptables -A INPUT -s 127.0.0.0/8 -j REJECT

{% for router  in router_configuration %}
iptables -A INPUT -i {{ router.iface }} -s 192.168.1.0/24 -j DROP
{% endfor %}

# Accept all established inbound traffic
iptables -A INPUT -m state --state RELATED,ESTABLISHED -m limit --limit 50/second --limit-burst 50 -j ACCEPT 

# Allow ping and limit
iptables -A INPUT -p icmp -m limit --limit 10/second --limit-burst 10 -j ACCEPT

# Allow outbound traffic
iptables -A OUTPUT -j ACCEPT

# Forward port on each interface
{% for router in router_configuration %}
{% if router.exposed_port is defined %}
{% for port in router.exposed_port %}
iptables -A INPUT -p tcp -i {{ router.iface }} --dport {{ port }} -j ACCEPT
{% endfor %}
{% endif %}
{% endfor %}

# Forward ssh
iptables -A INPUT -p tcp --dport 22 -j ACCEPT

# Reject all ports
iptables -A INPUT -j REJECT

# DOS Attacks mitigation 
iptables -A INPUT -p tcp --syn --dport 80 -m connlimit --connlimit-above 100 -j REJECT

# Prevent brute-force attacks
iptables -A INPUT -p tcp --dport 22 -m state --state NEW -m recent --set
iptables -A INPUT -p tcp --dport 22 -m state --state NEW -m recent --update --seconds 60 --hitcount 8 -j DROP

# prevent port scan
{% for router in router_configuration %}
iptables -A INPUT -i {{ router.iface }} -p tcp -m tcp --tcp-flags FIN,SYN,RST,PSH,ACK,URG NONE -j DROP
iptables -A INPUT -i {{ router.iface }} -p tcp -m tcp --tcp-flags FIN,SYN FIN,SYN -j DROP
iptables -A INPUT -i {{ router.iface }} -p tcp -m tcp --tcp-flags SYN,RST SYN,RST -j DROP
iptables -A INPUT -i {{ router.iface }} -p tcp -m tcp --tcp-flags FIN,RST FIN,RST -j DROP
iptables -A INPUT -i {{ router.iface }} -p tcp -m tcp --tcp-flags FIN,ACK FIN -j DROP
iptables -A INPUT -i {{ router.iface }} -p tcp -m tcp --tcp-flags ACK,URG URG -j DROP
iptables -A INPUT -i {{ router.iface }} -p tcp -m state --state NEW -m state --state NEW -m recent --set
iptables -A INPUT -i {{ router.iface }} -p tcp -m state --state NEW -m recent --update --seconds 30 --hitcount 10 -j DROP
iptables -A FORWARD -i {{ router.iface }} -p tcp -m state --state NEW -m recent --set
iptables -A FORWARD -i {{ router.iface }} -p tcp -m state --state NEW -m recent --update --seconds 30 --hitcount 10 -j DROP
{% endfor %}

iptables -N PORT_SCANNING
iptables -A PORT_SCANNING -p tcp --tcp-flags SYN,ACK,FIN,RST RST -m limit --limit 1/s -j RETURN
iptables -A PORT_SCANNING -j DROP
iptables -A INPUT -p tcp --tcp-flags ALL FIN,PSH,URG -j DROP
iptables -A INPUT -p tcp -m state --state NEW -m limit --limit 4/second --limit-burst 4 -j ACCEPT
iptables -A INPUT -p tcp --dport 80 -m state --state NEW -m limit --limit 50/minute --limit-burst 200 -j ACCEPT

# Only use UDP for DNS drop the rest
iptables -A INPUT -i $AD -p udp --sport 53 -j ACCEPT
iptables -A INPUT -i $RDP -p udp --sport 3389 -j ACCEPT
iptables -A INPUT -i $AD -p udp --dport 53 -j ACCEPT
iptables -A INPUT -i $RDP -p udp --dport 3389 -j ACCEPT
iptables -A OUTPUT -o $AD -p udp --sport 53 -j ACCEPT
iptables -A OUTPUT -o $AD -p udp --dport 53 -j ACCEPT
iptables -A INPUT -i $AD -p udp -j DROP
iptables -A OUTPUT -o $AD -p udp -j DROP

# Routing
{% for router in router_configuration %}
{% if router.exposed_port is defined %}
{% for port in router.exposed_port %}
iptables -t nat -A PREROUTING -d {{ router.address }} -p tcp --dport {{ port }} -j DNAT --to-destination {{ router.internal }}:{{ port }}
iptables -t nat -A POSTROUTING -s {{ router.address }} -p tcp --sport {{ port }} -j SNAT --to {{ router.address }}:{{ port }}
{% endfor %}
{% endif %}
{% endfor %}

{% for router in router_configuration %}
iptables -A FORWARD -i eth1 -o {{ router.iface }} -j ACCEPT
iptables -A FORWARD -i {{ router.iface }} -o eth1 -m state --state RELATED,ESTABLISHED -j ACCEPT
iptables -t nat -A POSTROUTING -o {{ router.iface }} -j MASQUERADE
{% endfor %}


#Nflog sending packets to IDS rules; needs nflog installed first
{% for router in router_configuration %}
iptables -I INPUT -i {{ router.iface }} -j NFLOG --nflog-group 0 --nflog-range 65535
{% endfor %}
nflog-zmq-send 0,1 tcp://$IIDS:10000

# Logging
iptables -N LOGGING
iptables -A INPUT -j LOGGING
iptables -A OUTPUT -j LOGGING
iptables -A LOGGING -m limit --limit 5/min -j LOG --log-prefix "iptables denied: " --log-level 5
iptables -A LOGGING -j DROP
